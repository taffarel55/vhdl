$date
  Wed Aug 26 22:12:49 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module full_adder_4bits_tb $end
$var reg 4 ! a[3:0] $end
$var reg 4 " b[3:0] $end
$var reg 1 # c_i $end
$var reg 4 $ s[3:0] $end
$var reg 1 % c_o $end
$scope module dut $end
$var reg 4 & a[3:0] $end
$var reg 4 ' b[3:0] $end
$var reg 1 ( c_i $end
$var reg 4 ) s[3:0] $end
$var reg 1 * c_o $end
$var reg 1 + c_out0 $end
$var reg 1 , c_out1 $end
$var reg 1 - c_out2 $end
$scope module fa0 $end
$var reg 1 . a $end
$var reg 1 / b $end
$var reg 1 0 c_i $end
$var reg 1 1 s $end
$var reg 1 2 c_o $end
$upscope $end
$scope module fa1 $end
$var reg 1 3 a $end
$var reg 1 4 b $end
$var reg 1 5 c_i $end
$var reg 1 6 s $end
$var reg 1 7 c_o $end
$upscope $end
$scope module fa2 $end
$var reg 1 8 a $end
$var reg 1 9 b $end
$var reg 1 : c_i $end
$var reg 1 ; s $end
$var reg 1 < c_o $end
$upscope $end
$scope module fa3 $end
$var reg 1 = a $end
$var reg 1 > b $end
$var reg 1 ? c_i $end
$var reg 1 @ s $end
$var reg 1 A c_o $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b1000 !
b0000 "
1#
b1001 $
0%
b1000 &
b0000 '
1(
b1001 )
0*
0+
0,
0-
0.
0/
10
11
02
03
04
05
06
07
08
09
0:
0;
0<
1=
0>
0?
1@
0A
#1000000
b1111 !
b0000 $
1%
b1111 &
b0000 )
1*
1+
1,
1-
1.
01
12
13
15
06
17
18
1:
0;
1<
1?
0@
1A
#2000000
b1111 "
b1111 $
b1111 '
b1111 )
1/
11
14
16
19
1;
1>
1@
#3000000
b0000 !
b0000 "
b0001 $
0%
b0000 &
b0000 '
b0001 )
0*
0+
0,
0-
0.
0/
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
#4000000
b1010 !
b0101 "
0#
b1111 $
b1010 &
b0101 '
0(
b1111 )
1/
00
13
16
19
1;
1=
1@
#5000000
